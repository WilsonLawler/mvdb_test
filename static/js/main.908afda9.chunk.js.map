{"version":3,"sources":["logo.svg","components/Movie.js","components/MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","movieGridCSS","display","padding","gridTemplateColumns","gridRowGap","gridColumnGap","imgCSS","height","boxShadow","Movie","state","movies","fetch","res","json","this","setState","results","console","log","loader","react_default","a","createElement","react_loader_spinner_default","type","color","width","movieList","map","movie","key","id","Link","to","concat","Overdrive_min_default","style","src","poster_path","alt","title","length","Component","posterImgCSS","marginTop","titleCSS","overviewCSS","margin","backgroundColor","MovieDetail","props","match","params","apiKey","movieDetail","backgroundImage","backdrop_path","backgroundRepeat","release_date","overview","Fragment","App","BrowserRouter","basename","process","className","logo","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.908afda9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c852fc4a.svg\";","import React, { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Overdrive from \"react-overdrive\";\r\n\r\nconst POSTER_PATH = \"http://image.tmdb.org/t/p/w154\";\r\n// STYLE--START\r\nconst movieGridCSS = {\r\n  display: \"grid\",\r\n  padding: \"1rem\",\r\n  gridTemplateColumns: \"repeat(6, 1fr)\",\r\n  gridRowGap: \"1rem\",\r\n  gridColumnGap: \"0.3rem\"\r\n};\r\nconst imgCSS = {\r\n  height: \"220px\",\r\n  boxShadow: \"0 0 35px black\"\r\n};\r\n\r\nclass Movie extends Component {\r\n  state = {\r\n    movies: []\r\n  };\r\n  async componentDidMount() {\r\n    const apiKey =\r\n      \"https://api.themoviedb.org/3/discover/movie?api_key=763a001f24857cb0f7e32293197e505a&language=zh-TW&region=TW&sort_by=popularity.desc&include_adult=false&include_video=false&page=1\";\r\n    const res = await fetch(apiKey);\r\n    const movies = await res.json();\r\n    this.setState({ movies: movies.results });\r\n    console.log(movies.results);\r\n  }\r\n  render() {\r\n    const { movies } = this.state;\r\n    const loader = (\r\n      <Loader type=\"Oval\" color=\"#eb4d4b\" height={80} width={80} />\r\n    );\r\n    const movieList = movies.map(movie => (\r\n      <div key={movie.id}>\r\n        <Link to={`/${movie.id}`}>\r\n          <Overdrive id={movie.id}>\r\n            <img\r\n              style={imgCSS}\r\n              src={`${POSTER_PATH}${movie.poster_path}`}\r\n              alt={movie.title}\r\n            />\r\n          </Overdrive>\r\n        </Link>\r\n      </div>\r\n    ));\r\n    return <div style={movieGridCSS}>{movies.length ? movieList : loader}</div>;\r\n  }\r\n}\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport Overdrive from \"react-overdrive\";\r\n\r\nconst POSTER_PATH = \"http://image.tmdb.org/t/p/w154\";\r\nconst BACKDROP_PATH = \"http://image.tmdb.org/t/p/w1280\";\r\n\r\n// STYLE--START\r\nconst posterImgCSS = {\r\n  marginTop: \"32px\"\r\n};\r\nconst titleCSS = {\r\n  color: \"cornsilk\"\r\n};\r\nconst overviewCSS = {\r\n  color: \"cornsilk\",\r\n  padding: \"8px 8px\",\r\n  margin: \"0 auto\",\r\n  width: \"70vw\",\r\n  backgroundColor: \"rgba(236, 240, 248,0.2)\"\r\n};\r\n// STYLE--END\r\n\r\nclass MovieDetail extends Component {\r\n  state = {\r\n    movie: {}\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    const apiKey = `https://api.themoviedb.org/3/movie/${id}?api_key=763a001f24857cb0f7e32293197e505a&language=zh-TW&region=TW&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`;\r\n    const res = await fetch(apiKey);\r\n    const movie = await res.json();\r\n    this.setState({ movie: movie });\r\n  }\r\n  render() {\r\n    const { movie } = this.state;\r\n    const movieDetail = (\r\n      <div\r\n        style={{\r\n          backgroundImage: `url(${BACKDROP_PATH}${movie.backdrop_path})`,\r\n          backgroundRepeat: \"no-repeat\"\r\n        }}\r\n      >\r\n        <Overdrive id={movie.id}>\r\n          <img\r\n            style={posterImgCSS}\r\n            src={`${POSTER_PATH}${movie.poster_path}`}\r\n            alt={movie.title}\r\n          />\r\n        </Overdrive>\r\n\r\n        <h1 style={titleCSS}>{movie.title}</h1>\r\n        <h3>{movie.release_date}</h3>\r\n        <p style={overviewCSS}>{movie.overview}</p>\r\n      </div>\r\n    );\r\n    const loader = (\r\n      <Loader type=\"Oval\" color=\"#eb4d4b\" height={80} width={80} />\r\n    );\r\n    return <React.Fragment>{movie ? movieDetail : loader}</React.Fragment>;\r\n  }\r\n}\r\n\r\nexport default MovieDetail;\r\n","import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\r\nimport Movie from \"./components/Movie\";\r\nimport MovieDetail from \"./components/MovieDetail\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Link to=\"/\">\r\n              <img src={logo} alt=\"logo\" />\r\n            </Link>\r\n          </header>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Movie} />\r\n            <Route path=\"/:id\" component={MovieDetail} />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}